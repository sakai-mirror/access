#* ------------------------------------------------------------------
#
# The CHEF Velocity Macro library
#
# To be included in each webapp's velocity file area.
#
*# ------------------------------------------------------------------

#* ------------------------------------------------------------------
# The standard way to escape text to make it safe for embedding in html
*# ------------------------------------------------------------------
#macro (chef_html $txt)$sakai_Validator.escapeHtml($txt)#end

#* ------------------------------------------------------------------
# The standard toolbar based on the $sakai_menu definition
# Note: url type items don't support form field sending, override other settings, and go to a new window
# CSS requirements: navIntraTool inlineForm searchField
#                   portletToolBarDisabled chefToolBarSelected chefToolBarDisabled
*# ------------------------------------------------------------------
#macro (chef_toolbar)

	## use the standard menu reference
	#set ($mnu=$sakai_menu)

	## do nothing if no menu or empty menu
	#if (($mnu) && (!$mnu.isEmpty()))
		<div class="navIntraTool">
		#foreach ($item in $mnu.Items)
			## figure the link
			#set ($base=$sakai_ActionURL.reset().setParameter("sakai_action", $item.Action).toString())

			#if ($item.IsEnabled)
				#if(!$item.IsDivider)
					
					## enabled not field not divider (i.e. a button)
					#if (!$item.IsField)

						## non-url support (i.e. action back to tool)
						#if ($item.Url.length() == 0)

							## checked item support
							#if($item.IsChecked)
								<span class="chefToolBarToggle">
									<a href="#" title="$item.Title" onclick="location = '$base'#if($item.Form)+buildQueryString('$item.Form')#end;return false;">
										$item.Title
									</a>
								</span>

							## unchecked item support
							#else
								<a href="#" title="$item.Title" onclick="location = '$base'#if($item.Form)+buildQueryString('$item.Form')#end;return false;">
									$item.Title
								</a>
							#end

						## url support (i.e. to another place, another window)
						#else
							<a href="$item.Url" title="$item.Title" target="_blank">
								$item.Title
							</a>
						#end

					## here's a text field in a form for the toolbar
					#else
					<form name="$item.Form" action="$base" class="inlineForm" method="post">
						<input size="15" value="$item.Value" name="$item.Title" id="$item.Title" type="text" class="searchField" />
					</form>
					#end

				## here's a menu divider
				#else
					<span class="portletToolBarDisabled">&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;</span>
				#end
			
			## not enabled - could be checked
			#elseif ($item.IsChecked)
				<span class="chefToolBarSelected">$item.Title</span>

			## not enabled - not checked - show if we are showing disabled
			#elseif ($mnu.Showdisabled)
				<span class="chefToolBarDisabled">$item.Title</span>
			#end

		## end of foreach loop
		#end
		</div>

	## end if "if there's a menu" if
	#end
#end


#* ------------------------------------------------------------------
# The standard way to deal with the ToolPortlet Alert
*# ------------------------------------------------------------------
#macro (chef_alert)
	#if(!$sakai_alert.isEmpty())<div class="alertMessage">#chef_html($sakai_alert.Alert)</div>#end
#end

#* ------------------------------------------------------------------
# The standard way to deal with the message at the top of a tool
*# ------------------------------------------------------------------
#macro (chef_viewmsg $msg)
	<div class="chefPageviewTitle">#chef_html($msg)</div>
#end

#* ------------------------------------------------------------------
# The standard way to deal with the message in place of a flat list
*# ------------------------------------------------------------------
#macro (chef_listmsg $msg)
	<div class="chefListMessage">#chef_html($msg)</div>
#end

#* ------------------------------------------------------------------
# The standard way to start a vm file - deal with fragment or not & css
*# ------------------------------------------------------------------
#macro (chef_start)
#if ($sakai_fragment=='false')
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <meta http-equiv="Content-Style-Type" content="text/css" />
    <title>$!{toolTitle}</title>
    $!sakai_head
#if ($frameRefresh)
	#foreach ($id in $frameRefresh)
	<script type="text/javascript" language="JavaScript">
	try
	{
		if (parent.${id}.location.toString().length > 1)
		{
			parent.${id}.location.replace(parent.${id}.location);
		}
	}
	catch (e1)
	{
		try
		{
			if (parent.parent.${id}.location.toString().length > 1)
			{
				parent.parent.${id}.location.replace(parent.parent.${id}.location);
			}
		}
		catch (e2)
		{
		}
	}
	</script>
	#end
#end
#if ($focusChange)
	<script type="text/javascript" language="JavaScript">
	try
	{
		parent.setFocus(${focusChange});
	}
	catch (e1)
	{
		alert(e1);
	}
	</script>
#end
  </head>
  <body #if ($sakai_onload) onload="${sakai_onload}" #end >
#end
## no comment
#end

#* ------------------------------------------------------------------
# The standard way to end a vm file - deal with fragment or not
*# ------------------------------------------------------------------
#macro (chef_end)
#if ($sakai_fragment=='false')</body></html>#end
#end

#* ------------------------------------------------------------------
# The standard way to start a portlet body - end with portletContainerEnd
*# ------------------------------------------------------------------
#macro (chef_portletContainer)
<div class="chefPortletContainer">
#end

#* ------------------------------------------------------------------
# The standard way to end a portlet body - started with portletContainer
*# ------------------------------------------------------------------
#macro (chef_portletContainerEnd)
</div>
#end

#* ------------------------------------------------------------------
# The standard way to start a portlet content - end with portletContentEnd
*# ------------------------------------------------------------------
#macro (chef_portletContent)
	<div class = "chefPortletContent">
#end

#* ------------------------------------------------------------------
# The standard way to end a portlet content - started with portletContent
*# ------------------------------------------------------------------
#macro (chef_portletContentEnd)
	</div>
#end

#* ------------------------------------------------------------------
# The standard way to start a flat list view table - end with portletFlatListEnd
*# ------------------------------------------------------------------
#macro (chef_portletFlatList $summary)
		<table class ="chefFlatListViewTable" cellspacing="0" summary ="$summary">
#end

#* ------------------------------------------------------------------
# The standard way to end a flat list view table - started with portletFlatList
*# ------------------------------------------------------------------
#macro (chef_portletFlatListEnd)
		</table>
#end

#* ------------------------------------------------------------------
# The standard way to instantiate a WYSIWYG formatted text editing widget
# $textarea_id - The HTML id of the textarea form element already in the HTML document
*# ------------------------------------------------------------------
#macro (chef_setupformattedtextarea $textarea_id)

	## Everything is in our own external JavaScript library
	<script type="text/javascript" src="#libraryLink('htmlarea/sakai-htmlarea.js')"></script>
	## Call a JavaScript function from within the library to do setup
	<script type="text/javascript" defer="1">chef_setupformattedtextarea('$textarea_id');</script>
#end


#macro (chef_setuphtmldocumenttextarea $textarea_id)
	
	## Everything is in our own external JavaScript library
	<script type="text/javascript" src="#libraryLink('htmlarea/sakai-htmlarea.js')"></script>
	## Call a JavaScript function from within the library to do setup
	<script type="text/javascript" defer="1">chef_setuphtmldocumenttextarea('$textarea_id');</script>
#end

#macro (sakai_courier)
#if ($courier)
<script type="text/javascript" language="JavaScript">
updateTime = ${courierTimeout}000;
updateUrl = "$courier";
scheduleUpdate();
</script>
#end
#end

#* ------------------------------------------------------------------
#
# For CHEF 1.x support
#
*# ------------------------------------------------------------------

#macro (toolbar $toolbar_mnu)
#set($sakai_menu=$toolbar_mnu)
#chef_toolbar()
#end

#macro (toolLink $toolLinkJunk $toolLinkAction)$sakai_ActionURL.setParameter("sakai_action","$toolLinkAction")#end

#macro (toolForm $toolFormJunk)$sakai_ActionURL.setAction()#end

#macro (imageLink $imageLinkName)$sakai_ActionURL.setResourcePath("${sakai_image_path}${imageLinkName}")#end

#macro (scriptLink $scriptName)$sakai_ActionURL.setResourcePath("${sakai_script_path}${scriptName}")#end

#macro (libraryLink $path)${sakai_library_path}${path}#end

#macro (scheduleLink $scheduleLinkName)/library/schedule/$scheduleLinkName#end

#macro (chatlogLink $chatlogLinkPanel)$sakai_ActionURL.setParameter("$param_panel","$chatlogLinkPanel")#end

#macro (contentLink $contentLinkPanel)$sakai_ActionURL.setParameter("$param_panel","$contentLinkPanel")#end

#macro (contentCourierLink $contentCourierLinkPanel)$sakai_ActionURL.setParameter("$param_panel","$contentCourierLinkPanel")#end

#macro (toolLinkParam $toolLinkJunk $toolLinkAction $toolLinkQuery)$sakai_ActionURL.setParameter("sakai_action","$toolLinkAction").setQueryString("$toolLinkQuery")#end
